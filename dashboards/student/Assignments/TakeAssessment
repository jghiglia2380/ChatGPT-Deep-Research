// File: /dashboards/student/Assignments/TakeAssessment.tsx
import { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { supabase } from '@/lib/supabaseClient';
import { Assessment, StudentAssignment } from './types';

export default function TakeAssessment() {
  const { id } = useParams();
  const [assessment, setAssessment] = useState<Assessment | null>(null);
  const [studentAssignment, setStudentAssignment] = useState<StudentAssignment | null>(null);
  const [responses, setResponses] = useState<any>({});
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    const loadAssessment = async () => {
      const { data: saData, error: saError } = await supabase
        .from('student_assignments')
        .select('*, assignments(*, assessments(*))')
        .eq('id', id)
        .single();

      if (saError) {
        console.error('Error loading assignment:', saError);
        return;
      }

      setStudentAssignment(saData);
      setAssessment(saData.assignments.assessments);
    };

    loadAssessment();
  }, [id]);

  const handleChange = (questionId: string, value: any) => {
    setResponses((prev: any) => ({ ...prev, [questionId]: value }));
  };

  const handleSubmit = async () => {
    setSubmitting(true);
    const { error } = await supabase
      .from('student_assignments')
      .update({
        responses,
        status: 'completed',
        submit_time: new Date().toISOString(),
      })
      .eq('id', id);

    if (error) {
      console.error('Submit error:', error);
    } else {
      alert('Assessment submitted!');
    }
    setSubmitting(false);
  };

  if (!assessment) return <div className="p-6">Loading...</div>;

  return (
    <div className="p-6 max-w-3xl mx-auto">
      <h2 className="text-xl font-bold mb-4">{assessment.title}</h2>
      <div className="space-y-6">
        {assessment.questions.map((q: any, index: number) => (
          <div key={q.id} className="border-b pb-4">
            <p className="font-medium mb-2">
              Q{index + 1}: {q.prompt}
            </p>
            {q.type === 'multiple_choice' && (
              <div className="space-y-1">
                {q.choices.map((choice: string) => (
                  <label key={choice} className="block">
                    <input
                      type="radio"
                      name={`q_${q.id}`}
                      value={choice}
                      checked={responses[q.id] === choice}
                      onChange={() => handleChange(q.id, choice)}
                      className="mr-2"
                    />
                    {choice}
                  </label>
                ))}
              </div>
            )}
            {q.type === 'short_response' && (
              <textarea
                className="w-full border rounded p-2"
                rows={3}
                value={responses[q.id] || ''}
                onChange={(e) => handleChange(q.id, e.target.value)}
              />
            )}
            {q.type === 'fill_in_the_blank' && (
              <input
                type="text"
                className="w-full border rounded p-2"
                value={responses[q.id] || ''}
                onChange={(e) => handleChange(q.id, e.target.value)}
              />
            )}
            {q.type === 'situational' && (
              <textarea
                className="w-full border rounded p-2"
                rows={4}
                placeholder="Describe how you would respond in this scenario..."
                value={responses[q.id] || ''}
                onChange={(e) => handleChange(q.id, e.target.value)}
              />
            )}
          </div>
        ))}
        <button
          disabled={submitting}
          onClick={handleSubmit}
          className="bg-green-600 text-white px-6 py-2 rounded hover:bg-green-700"
        >
          {submitting ? 'Submitting...' : 'Submit Assessment'}
        </button>
      </div>
    </div>
  );
}
